train size:80 test size:40
train_time_ave: 765.2925459384918 test_time_ave: 0.3512897968292236
test_loss_ave: 0.36227312031041947 test_acc_ave: 0.9400000000000001
train size:160 test size:40
train_time_ave: 1443.6002070426941 test_time_ave: 0.33310728073120116
test_loss_ave: 0.4929890832065212 test_acc_ave: 0.9175000000000001
train size:240 test size:40
train_time_ave: 2155.443412733078 test_time_ave: 0.33467247486114504
test_loss_ave: 0.41803677253115207 test_acc_ave: 0.9499999999999998
train size:320 test size:40
train_time_ave: 2916.0713663339616 test_time_ave: 0.3421466588973999
test_loss_ave: 0.4039682456076844 test_acc_ave: 0.95
train size:400 test size:40
train_time_ave: 3580.430400657654 test_time_ave: 0.33564181327819825
test_loss_ave: 0.1516584037101063 test_acc_ave: 0.9674999999999999
Secondary CNN structure

model.add(Conv2D(16, kernel_size=(5, 5), strides=(1, 1),
                 activation='relu',
                 input_shape=input_shape))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
model.add(Conv2D(64, (5, 5), activation='relu'))    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
model.add(Conv2D(256, (5, 5), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))          
model.add(Flatten())
model.add(Dense(1000, activation='relu'))